# Table of Contents
- LICENSE
- README.md
- compress_llama.py
- generate_fisher_llm.py
- llama_comp/compression_utils.py
- llama_comp/utils_svd.py

## File: LICENSE

- Extension: 
- Language: unknown
- Size: 11357 bytes
- Created: 2025-05-05 16:37:03
- Modified: 2025-05-05 13:32:20

### Code

```unknown
                                 Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

```

## File: README.md

- Extension: .md
- Language: markdown
- Size: 297 bytes
- Created: 2025-05-05 16:37:03
- Modified: 2025-05-05 13:32:20

### Code

```markdown
# Memory Efficient LM Compression using Fisher Information from Low-Rank Representations
Code for reproduction some of experiements of the paper.

For Llama and Mistral:

  1) For FWSVD-LoRA gradients generataion use ./generate_fisher_llm.py
  2) For FWSVD\SVD compression use ./compress_llama.py

```

## File: compress_llama.py

- Extension: .py
- Language: python
- Size: 1445 bytes
- Created: 2025-05-05 16:37:03
- Modified: 2025-05-05 13:32:20

### Code

```python
from transformers import AutoTokenizer, AutoModelForCausalLM, AutoConfig
from llama_comp.compression_utils import CompressedLlamaForCausalLM, CompressedLlamaModel

#pretrained = "meta-llama/Llama-2-7b-hf"
pretrained = "meta-llama/Llama-3.1-8B"

model = AutoModelForCausalLM.from_pretrained(pretrained)
tokenizer = AutoTokenizer.from_pretrained(pretrained)

#rank=2750, 0.949,
#rank=2480+40, 0.899
#rank=2250+60, 0.85
#rank=2050, 0.80
#rank=1800, 0.75
#rank=1600, 0.70
trunc_raw = {i:2750 for i in fisher.keys()}

model_ = CompressedLlamaForCausalLM.from_pretrained(
                    pretrained,
                    trust_remote_code=True,
                    rank=trunc_raw,
                    layer_mask = r'.*/(up_proj|down_proj|gate_proj)',
                    #layer_mask = r'.*/(up_proj|down_proj|gate_proj|q_proj|k_proj|o_proj|v_proj)',
                    compression_type='svd',
                )

model_.to_compression(compress=True, 
                    weight=fisher if fisher else None,
                    )

pytorch_total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
pytorch_total_params

print('Model after compression',sum(p.numel() for p in model_.parameters() if p.requires_grad) / sum(p.numel() for p in model.parameters() if p.requires_grad))

model_.save_pretrained(r"./compressed_llamas/llama-Llama-3-8b-hf-09-svd")
tokenizer.save_pretrained(r"./compressed_llamas/llama-Llama-3-8b-hf-09-svd")

```

## File: generate_fisher_llm.py

- Extension: .py
- Language: python
- Size: 4962 bytes
- Created: 2025-05-05 16:37:03
- Modified: 2025-05-05 13:32:20

### Code

```python
import os
from collections import defaultdict
from functools import reduce
from trl import SFTConfig, SFTTrainer

import torch
from transformers import AutoModelForCausalLM, AutoTokenizer, TrainingArguments, Trainer, BitsAndBytesConfig
from peft import prepare_model_for_kbit_training, LoraConfig, get_peft_model

def get_module_by_name(module, access_string):
     names = access_string.split(sep='.')
     return reduce(getattr, names, module)

class CustomTrainer(SFTTrainer):
    def make_grad_bank(self):
        self.mass = dict() #defaultdict(torch.tensor)
        for name, module in self.model.named_modules():
            if isinstance(module, torch.nn.Linear):
                if get_module_by_name(self.model, name).weight.requires_grad:
                    self.mass[name] = torch.zeros_like(get_module_by_name(self.model, name).weight, 
                                                       dtype=torch.float).cpu()
        self.avg_counter = 0
        
    def training_step(
        self, model, inputs, num_items_in_batch=None
    ) -> torch.Tensor:
        """
        Perform a training step on a batch of inputs.

        Subclass and override to inject custom behavior.

        Args:
            model (`nn.Module`):
                The model to train.
            inputs (`Dict[str, Union[torch.Tensor, Any]]`):
                The inputs and targets of the model.

                The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
                argument `labels`. Check your model's documentation for all accepted arguments.

        Return:
            `torch.Tensor`: The tensor with training loss on this batch.
        """
        model.train()
        if hasattr(self.optimizer, "train") and callable(self.optimizer.train):
            self.optimizer.train()

        inputs = self._prepare_inputs(inputs)

        with self.compute_loss_context_manager():
            loss = self.compute_loss(model, inputs)

        del inputs
        if (
            self.args.torch_empty_cache_steps is not None
            and self.state.global_step % self.args.torch_empty_cache_steps == 0
        ):
            torch.cuda.empty_cache()

        kwargs = {}

        if self.use_apex:
            with amp.scale_loss(loss, self.optimizer) as scaled_loss:
                scaled_loss.backward()
        else:
            self.accelerator.backward(loss, **kwargs)

            for name, module in model.named_modules():
                if isinstance(module, torch.nn.Linear):
                    if get_module_by_name(model, name).weight.requires_grad:
                        #self.mass[name] += get_module_by_name(model, name).weight.grad.detach().cpu().double()**2
                        new_var = get_module_by_name(model, name).weight.grad.detach().cpu()**2
                        self.mass[name] += new_var
            self.avg_counter += 1


            # Finally we need to normalize the loss for reporting
            if num_items_in_batch is None:
                return loss.detach() / self.args.gradient_accumulation_steps
            return loss.detach()


        return loss.detach() / self.args.gradient_accumulation_steps

from datasets import load_dataset
from trl import SFTConfig, SFTTrainer
from peft import LoraConfig

#dataset = load_dataset("wikitext", "wikitext-2-raw-v1", split="train")
#dataset['train'] = dataset['train'].select(range(4000*2))
#dataset = dataset["train"].train_test_split(test_size=0.2, seed=42)

#dataset = load_dataset("wikitext", "wikitext-2-raw-v1", split="train")
#dataset = dataset.select(range(4000*4))

ds = load_dataset("robbiegwaldd/dclm-micro")
dataset = ds['train'].select(range(150000))

peft_config = LoraConfig(
    r=64, 
    lora_alpha=64,
    use_rslora=True,
    #target_modules = ['down_proj', 'gate_proj', 'up_proj'],
    target_modules="all-linear",
    lora_dropout=0.0, 
    bias="none", 
    #modules_to_save = ["lm_head", "embed_tokens"],        # needed because we added new tokens to tokenizer/model
    task_type="CAUSAL_LM"
)

training_args = SFTConfig(
    max_seq_length=512,
    output_dir="./_tmp6_llama2_7b_all-linear",
    report_to='none',
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    gradient_accumulation_steps=1,
    num_train_epochs=1,
    eval_strategy="no",
    save_strategy="no",
    # remove_unused_columns=False,
    # load_best_model_at_end = True,
    dataset_text_field="text",
    learning_rate=5e-5,
    warmup_steps=0,
    seed=0,
    lr_scheduler_type="constant",
    bf16=True,
    )

trainer = CustomTrainer(
    "meta-llama/Llama-2-7b-hf",
    train_dataset=dataset,
    args=training_args,
    peft_config=peft_config,
)
trainer.make_grad_bank()

trainer.train()
#"meta-llama/Llama-3.1-8B",
#"meta-llama/Llama-2-7b-hf",

import pickle
with open(trainer.args.output_dir+f'/fisher_{trainer.avg_counter}.pkl', 'wb') as fp:
    pickle.dump(trainer.mass, fp)

```

## File: llama_comp/compression_utils.py

- Extension: .py
- Language: python
- Size: 5568 bytes
- Created: 2025-05-05 16:36:08
- Modified: 2025-05-05 13:32:20

### Code

```python
from typing import Tuple
#from transformers import BertConfig, BertForSequenceClassification, BertModel
from functools import partial
from typing import Optional, Tuple

#from transformers.models.bert import configuration_bert
from transformers import AutoModel, LlamaModel, LlamaForCausalLM, LlamaConfig, AutoModelForCausalLM
from .utils_svd import map_module, compress_linear

comp_types = {"svd": compress_linear}

class CompressedLlamaConfig(LlamaConfig):
    """Class CompressedModelForCausalLM defines a configuration for compressed
    Mistral. Here, we split shape to input and output shape in order to serialize
    them to different fields in JSON.
    """

    def __init__(self, *args, shape_in: Tuple[int] = (),
                 shape_out: Tuple[int] = (), rank: int = 128, compression_type: str = 'svd', model_already_compressed = False,
                 layer_mask: str = r'/decoder/layer/\d+/(intermediate|output)', **kwargs):
        super().__init__(*args, **kwargs)
        self.shape_in = shape_in
        self.shape_out = shape_out
        self.rank = rank
        self.compression_type = compression_type
        self.layer_mask = layer_mask
        self.model_already_compressed = model_already_compressed

#CompressedBertConfig.register_for_auto_class()

class CompressedLlamaForCausalLM(LlamaForCausalLM):
    """Class TTCompressedBertForSequenceClassification defines a BERT-based model
    with compressed linear layers with TT.
    """

    #LAYERS = r'/(de|en)coder/layers/\d+/fc[12]'
    #LAYERS = r'/encoder/layer/\d+/(intermediate|output)'

    config_class = CompressedLlamaConfig

    def __init__(self, config: CompressedLlamaConfig,
                shape: Optional[Tuple[Tuple[int], Tuple[int]]] = None,
                rank: dict = None,
                layer_mask: Optional[str] = None,
                compression_type: str = None,
                model_already_compressed: bool = False, 
                ):
        super().__init__(config)

        self.rank = rank or config.rank
        self.layer_mask = layer_mask or config.layer_mask
        self.compression_type = compression_type or config.compression_type
        self.model_already_compressed = model_already_compressed or config.model_already_compressed

        self.shape = shape
        if self.shape is None:
            self.shape = (tuple(self.config.shape_in),
                          tuple(self.config.shape_out))
        if self.model_already_compressed:
            compress_fn = partial(comp_types[self.compression_type], 
                        rank=self.rank, shape=self.shape,
                        weight=None, random_init=True
                        )
            self = map_module(self, compress_fn, self.layer_mask)   

    def to_compression(self, compress: bool = False, weight = None):
        compress_fn = partial(comp_types[self.compression_type], 
                              rank=self.rank, shape=self.shape,
                              weight=weight, random_init=False,
                              )
        #if not compress:
        #    compress_fn = self.convert
        self = map_module(self, compress_fn, self.layer_mask)

        self.config.model_already_compressed = True

#CompressedBertForSequenceClassification.register_for_auto_class('AutoModelForSequenceClassification')

class CompressedLlamaModel(LlamaModel):
    """Class TTCompressedBertForSequenceClassification defines a BERT-based model
    with compressed linear layers with TT.
    """

    #LAYERS = r'/(de|en)coder/layers/\d+/fc[12]'
    #LAYERS = r'/encoder/layer/\d+/(intermediate|output)'

    config_class = CompressedLlamaConfig

    def __init__(self, config: CompressedLlamaConfig,
                shape: Optional[Tuple[Tuple[int], Tuple[int]]] = None,
                rank: dict = None,
                layer_mask: Optional[str] = None,
                compression_type: str = None,
                model_already_compressed: bool = False, 
                ):
        super().__init__(config)

        self.rank = rank or config.rank
        self.layer_mask = layer_mask or config.layer_mask
        self.compression_type = compression_type or config.compression_type
        self.model_already_compressed = model_already_compressed or config.model_already_compressed

        self.shape = shape
        if self.shape is None:
            self.shape = (tuple(self.config.shape_in),
                          tuple(self.config.shape_out))
        if self.model_already_compressed:
            compress_fn = partial(comp_types[self.compression_type], 
                        rank=self.rank, shape=self.shape,
                        weight=None, random_init=True
                        )
            self = map_module(self, compress_fn, self.layer_mask)   

    def to_compression(self, compress: bool = False, weight = None):
        compress_fn = partial(comp_types[self.compression_type], 
                              rank=self.rank, shape=self.shape,
                              weight=weight, random_init=False,
                              )
        #if not compress:
        #    compress_fn = self.convert
        self = map_module(self, compress_fn, self.layer_mask)

        self.config.model_already_compressed = True

#AutoConfig.register("CompressedBert", CompressedBertConfig)
CompressedLlamaConfig.register_for_auto_class()
AutoModel.register(CompressedLlamaConfig, CompressedLlamaModel)
AutoModelForCausalLM.register(CompressedLlamaConfig, CompressedLlamaForCausalLM)
#CompressedBertModel.register_for_auto_class("AutoModel")
```

## File: llama_comp/utils_svd.py

- Extension: .py
- Language: python
- Size: 15379 bytes
- Created: 2025-05-05 16:36:08
- Modified: 2025-05-05 13:32:20

### Code

```python
import torch
import logging
import re
from functools import wraps
from re import Pattern
from typing import Callable, Dict, Optional, Tuple, Sequence

import numpy as np

class SVD(torch.nn.Module):
    def __init__(self,input_size, output_size, r, bias):
        super(SVD, self).__init__()
        self.weight = torch.Tensor()
        self.lin0 = torch.nn.Linear(in_features=input_size, out_features=r, bias=False)
        self.lin1 = torch.nn.Linear(in_features=r, out_features=output_size, bias=bias)

    def forward(self, x):
        output = self.lin0(x)
        output = self.lin1(output)
        return output

def Aw_svd(module, rank = 51, weight = None):
    bias = module.bias if module.bias is not None else None
    module = module.to('cuda:0',# torch.float32
                       )
    if weight is not None:
        I = torch.diag(torch.sqrt(weight.sum(0))).to(module.weight.device, module.weight.dtype)
    else:
        I = torch.eye(module.in_features).to(module.weight.device, module.weight.dtype)
    #U, S, Vt = torch.linalg.svd((I @ module.weight.T).T , full_matrices=False)
    #TODO: speedup fix
    #print('=====\n',module.weight.device,'\n======')
    U, S, Vt = torch.linalg.svd((I @ module.weight.T).T.to(module.weight.device) , full_matrices=False, driver='gesvdj')

    w1 = torch.linalg.lstsq(I, torch.mm(torch.diag(torch.sqrt(S[0:rank])),Vt[0:rank, :]).T).solution.T
    w2 = torch.mm(U[:, 0:rank], torch.diag(torch.sqrt(S[0:rank])))

    module = SVD(module.in_features,
                    module.out_features,
                    rank, bias is not None)

    module.lin0.weight.data.copy_(w1)
    module.lin1.weight.data.copy_(w2)
    
    if bias is not None:
        module.lin1.bias.data.copy_(bias)
    
    return module

def w_svd(module, rank = 51, weight = None, random_init=False):
    bias = module.bias if module.bias is not None else None

    if random_init:
        module = SVD(module.in_features,
                    module.out_features,
                    rank, bias is not None)
        
        #module.lin0.weight.uniform_(0.0, 1.0)
        #module.lin1.weight.uniform_(0.0, 1.0)
        
        if bias is not None:
            module.lin1.bias.data.copy_(bias)
        
        return module

    module = module.to('cuda:0',# torch.float32
                       )
    
    if weight is not None:
        I_row = torch.diag(torch.sqrt(weight.sum(0))).to(module.weight.device, module.weight.dtype)
        I_col = torch.diag(torch.sqrt(weight.sum(1))).to(module.weight.device, module.weight.dtype)
    else:
        I_row = torch.eye(module.in_features).to(module.weight.device, module.weight.dtype)
        I_col = torch.eye(module.out_features).to(module.weight.device, module.weight.dtype)

    #logging.info(str(I_row.shape) + str(module.weight.shape) + str(I_col.shape))

    U, S, Vt = torch.linalg.svd( (I_col @ module.weight @ I_row ).to(module.weight.device) , full_matrices=False, driver='gesvdj')

    w1 = torch.linalg.lstsq(I_row, torch.mm(torch.diag(torch.sqrt(S[0:rank])),Vt[0:rank, :]).T).solution.T
    w2 = torch.linalg.lstsq(I_col, torch.mm(U[:, 0:rank], torch.diag(torch.sqrt(S[0:rank]))) ).solution

    #w1 = torch.mm(torch.diag(torch.sqrt(S[0:rank])),Vt[0:rank, :])
    #w2 = torch.mm(U[:, 0:rank], torch.diag(torch.sqrt(S[0:rank])))

    #w2 = torch.mm(U[:, 0:rank], torch.diag(torch.sqrt(S[0:rank]))) @ I_col.pinverse()

    logging.info('ALTERNATIVE FWSVD')

    module = SVD(module.in_features,
                    module.out_features,
                    rank, bias is not None)

    module.lin0.weight.data.copy_(w1)
    module.lin1.weight.data.copy_(w2)
    
    if bias is not None:
        module.lin1.bias.data.copy_(bias)
    
    return module

# def make_contraction(shape, rank, batch_size=32,
#                      seqlen=512) -> ContractExpression:
#     ndim = len(rank) - 1
#     row_shape, col_shape = shape

#     # Generate all contraction indexes.
#     row_ix, col_ix = np.arange(2 * ndim).reshape(2, ndim)
#     rank_ix = 2 * ndim + np.arange(ndim + 1)
#     batch_ix = 4 * ndim  # Zero-based index.

#     # Order indexes of cores.
#     cores_ix = np.column_stack([rank_ix[:-1], row_ix, col_ix, rank_ix[1:]])
#     cores_shape = zip(rank[:-1], row_shape, col_shape, rank[1:])

#     # Order indexes of input (contraction by columns: X G_1 G_2 ... G_d).
#     input_ix = np.insert(row_ix, 0, batch_ix)
#     input_shape = (batch_size * seqlen, ) + row_shape

#     # Order indexes of output (append rank indexes as well).
#     output_ix = np.insert(col_ix, 0, batch_ix)
#     output_ix = np.append(output_ix, (rank_ix[0], rank_ix[-1]))

#     # Prepare contraction operands.
#     ops = [input_shape, input_ix]
#     for core_ix, core_shape in zip(cores_ix, cores_shape):
#         ops.append(core_shape)
#         ops.append(core_ix)
#     ops.append(output_ix)
#     ops = [tuple(op) for op in ops]

#     return contract_expression(*ops)

# class TTCompressedLinear(torch.nn.Module):
#     """Class TTCompressedLinear is a layer which represents a weight matrix of
#     linear layer in factorized view as tensor train matrix.

#     >>> linear_layer = T.nn.Linear(6, 6)
#     >>> tt_layer = TTCompressedLinear \
#     ...     .from_linear(linear_layer, rank=2, shape=((2, 3), (3, 2)))
#     """

#     def __init__(self, cores: Sequence[torch.Tensor],
#                  bias: Optional[torch.Tensor] = None):
#         super().__init__()

#         for i, core in enumerate(cores):
#             if core.ndim != 4:
#                 raise ValueError('Expected number of dimensions of the '
#                                  f'{i}-th core is 4 but given {cores.ndim}.')

#         # Prepare contaction expression.
#         self.rank = (1, ) + tuple(core.shape[3] for core in cores)
#         self.shape = (tuple(core.shape[1] for core in cores),
#                       tuple(core.shape[2] for core in cores))
#         self.contact = make_contraction(self.shape, self.rank)

#         # TT-matrix is applied on the left. So, this defines number of input
#         # and output features.
#         self.in_features = np.prod(self.shape[0])
#         self.out_features = np.prod(self.shape[1])

#         # Create trainable variables.
#         self.cores = torch.nn.ParameterList(torch.nn.Parameter(core) for core in cores)
#         self.bias = None
#         if bias is not None:
#             if bias.size() != self.out_features:
#                 raise ValueError(f'Expected bias size is {self.out_features} '
#                                  f'but its shape is {bias.shape}.')
#             self.bias = torch.nn.Parameter(bias)

#     def forward(self, input: torch.Tensor) -> torch.Tensor:
#         # We need replace the feature dimension with multi-dimension to contact
#         # with TT-matrix.
#         input_shape = input.shape
#         input = input.reshape(-1, *self.shape[0])

#         # Contract input with weights and replace back multi-dimension with
#         # feature dimension.
#         output = self.contact(input, *self.cores)
#         output = output.reshape(*input_shape[:-1], self.out_features)

#         if self.bias is not None:
#             output += self.bias
#         return output

#     @classmethod
#     def from_linear(cls, linear: torch.nn.Linear,
#                     shape: Tuple[Tuple[int], Tuple[int]], rank: int, **kwargs):
#         ndim = len(shape[0])

#         # Prepare information about shape and rank of TT (not TTM).
#         tt_rank = (1, ) + (rank, ) * (ndim - 1) + (1, )
#         tt_shape = tuple(n * m for n, m in zip(*shape))

#         # Reshape weight matrix to tensor indexes like TT-matrix.
#         matrix = linear.weight.data.T
#         tensor = matrix.reshape(shape[0] + shape[1])
#         for i in range(ndim - 1):
#             tensor = tensor.moveaxis(ndim + i, 2 * i + 1)

#         # Reshape TT-matrix to a plain TT and apply decomposition.
#         tensor = tensor.reshape(tt_shape)
#         cores = ttd(tensor, tt_rank, **kwargs)

#         # Reshape TT-cores back to TT-matrix cores (TTM-cores).
#         core_shapes = zip(tt_rank, *shape, tt_rank[1:])
#         cores = [core.reshape(core_shape)
#                  for core, core_shape in zip(cores, core_shapes)]

#         # Make copy of bias if it exists.
#         bias = None
#         if linear.bias is not None:
#             bias = torch.clone(linear.bias.data)

#         return TTCompressedLinear(cores, bias)

#     @classmethod
#     def from_random(cls, shape: Tuple[Tuple[int], Tuple[int]], rank: int,
#                     bias: bool = True):
#         tt_ndim = len(shape[0])
#         tt_rank = (1, ) + (rank, ) * (tt_ndim - 1) + (1, )
#         core_shapes = zip(tt_rank, *shape, tt_rank[1:])
#         cores = [torch.randn(core_shape) for core_shape in core_shapes]

#         bias_term = None
#         if bias:
#             out_features = np.prod(shape[1])
#             bias_term = torch.randn(out_features)

#         return TTCompressedLinear(cores, bias_term)

def map_module(root: torch.nn.Module,
               func: Callable[[torch.nn.Module, str], torch.nn.Module],
               patt: Optional[str] = None) -> torch.nn.Module:
    """Function ``map_module`` applies a function to each leaf of module tree
    which matches to a specified pattern.

    Parameters
    ----------
    root : torch.nn.Module
        Module to modify.
    func : callable
        Function to be applied to every module (or matched to pattern) in
        module tree.
    patt : str, optional
        Pattern to filter modules by path in module tree.

    Returns
    -------
    torch.nn.Module
        Module modified in-place.
    """
    @wraps(func)
    def func_safe(*args, **kwargs):
        node = func(*args, **kwargs)
        if not isinstance(node, torch.nn.Module):
            raise ValueError('Mapped result must be toch.nn.Module type '
                             f'but given {type(node)}.')
        return node

    return _map_module(root, func_safe, re.compile(patt or r'.*'), '')


def _map_module(root: torch.nn.Module,
                func: Callable[[torch.nn.Module, str], torch.nn.Module], patt: Pattern,
                path: str) -> torch.nn.Module:
    #logging.info('Try to apply compression to layer %s', path)
    for name, child in root.named_children():
        node = _map_module(child, func, patt, f'{path}/{name}')
        if node != child:
            setattr(root, name, node)
    if patt.match(path or '/'):
        root = func(root, path or '/')
    return root


def convert_linear(module: torch.nn.Linear, ctor, **kwargs) -> torch.nn.Module:
    """Function convert_linear takes module and returns linear module with
    approximate matmul. Non-linear modules are returned intact.
    """
    if not isinstance(module, torch.nn.Linear):
        return module
    raise NotImplementedError


def numel(module: torch.nn.Module):
    value = sum(x.numel() for x in module.parameters()) + \
            sum(x.numel() for x in module.buffers())

    def account_prunned(module: torch.nn.Module, path: str):
        nonlocal value
        for name, attr in vars(module).items():
            if not name.endswith('_mask') or not isinstance(attr, torch.Tensor):
                continue

            weight_name = name[:-5]
            if not hasattr(module, weight_name):
                continue

            weight = getattr(module, weight_name)
            value -= weight.numel() - attr.sum()
            value += attr.numel()
        return module

    def account_quantized(module: torch.nn.Module, path: str):
        nonlocal value
        if isinstance(module, torch.nn.quantized.Linear):
            value += module.weight().numel()
            if module.bias() is not None:
                value += module.bias().numel()
        return module

    def account_rest(module: torch.nn.Module, path: str):
        account_prunned(module, path)
        account_quantized(module, path)
        return module

    map_module(module, account_rest)
    return value


def sizeof(module: torch.nn.Module):
    value = sum(x.numel() * x.element_size() for x in module.parameters()) + \
            sum(x.numel() * x.element_size() for x in module.buffers())

    def account_prunned(module: torch.nn.Module, path: str):
        nonlocal value
        for name, attr in vars(module).items():
            if not name.endswith('_mask') or not isinstance(attr, torch.Tensor):
                continue

            weight_name = name[:-5]
            if not hasattr(module, weight_name):
                continue

            weight = getattr(module, weight_name)
            value -= (weight.numel() - attr.sum()) * weight.element_size()
            value += attr.numel() * attr.element_size()
        return module

    def account_quantized(module: torch.nn.Module, path: str):
        nonlocal value
        if isinstance(module, torch.nn.quantized.Linear):
            value += module.weight().numel() * module.weight().element_size()
            if (bias := module.bias()) is not None:
                value += bias.numel() * bias.element_size()
        return module

    def account_rest(module: torch.nn.Module, path: str):
        account_prunned(module, path)
        account_quantized(module, path)
        return module

    map_module(module, account_rest)
    return value


def flatten_module(module: torch.nn.Module, regexp=None) -> Dict[str, torch.nn.Module]:
    modules = {}
    map_module(module, lambda x, y: modules.update(**{y: x}) or x, regexp)
    return modules


def print_flatten(module: torch.nn.Module):
    paths = []
    path_len = 0
    names = []
    name_len = 0
    indx_len = 0

    def func(module, path):
        nonlocal path_len, name_len, indx_len
        paths.append(path)
        path_len = max(path_len, len(path))
        name = module.__class__.__name__
        names.append(name)
        name_len = max(name_len, len(name))
        indx_len += 1
        return module

    map_module(module, func)

    indx_len = int(np.ceil(np.log10(indx_len)))
    fmt = f'{{indx:>{indx_len}s}} {{path:{path_len}s}} {{name:{name_len}s}}'
    print(fmt.format(indx='#', path='Path', name='Layer'))
    print('-' * (indx_len + path_len + name_len + 2))
    for i, (path, name) in enumerate(zip(paths, names)):
        print(fmt.format(indx=str(i), path=path, name=name))


def compress_linear(module: torch.nn.Module, path: str,
                       shape: Tuple[Tuple[int], Tuple[int]],
                       rank: int,
                       weight,
                       random_init,
                       ) -> torch.nn.Module:
    if not isinstance(module, torch.nn.Linear):
        return module    
    logging.info('apply svd compression to layer %s', path)

    #if random_init:
    #    module.weight.data.uniform_(0.0, 1.0)
    # print("path!!!",path)
    rank_real = rank[path.replace(r'/','.')[1:]]
    if rank_real == 0:
        return module
    
    if weight:
        logging.info("with weight !")
        #with open(weight, 'rb') as f:
        #    mass = pickle.load(f)
        path_fisher = path.replace(r'/','.')[1:]
        return w_svd(module, rank_real, weight[path_fisher], 
                    random_init=random_init)
    else:
        return w_svd(module, rank_real, 
                    random_init=random_init)
```

